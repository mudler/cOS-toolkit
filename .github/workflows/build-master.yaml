







































name: Build cOS master

on: 
 push:
   branches:
     - master
   tags:
     - v*


concurrency:
  group: ci-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true

jobs:
  
  
  
  
  docker-build-opensuse:
    
  
    runs-on: ubuntu-latest
  

    env:
      FLAVOR: opensuse
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Build  ðŸ”§
        shell: 'script -q -e -c "bash {0}"'
        run: |
          source .envrc
          cos-build $FLAVOR

  
  
  
  build-opensuse:
    
  
    runs-on: ubuntu-latest
  

    env:
      FLAVOR: opensuse
      FINAL_REPO: quay.io/costoolkit/releases-opensuse
      DOWNLOAD_METADATA: false
      PUSH_CACHE: true
      REPO_CACHE: quay.io/costoolkit/build-opensuse-cache
    steps:
      
  
      - name: Install Go
        uses: actions/setup-go@v2

      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      
  
  
      - name: Run make validate
        run: |
          sudo -E make validate

      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build
          popd
          ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Generate manifests
        run: |
          for f in build/*tar*; do
            [ -e "$f" ] || continue
            sudo -E luet mtree -- generate $f -o "$f.mtree"
          done
      - name: Append manifests to metadata
        run: |
          for f in build/*mtree; do
            [ -e "$f" ] || continue
            BASE_NAME=`basename -s .package.tar.zst.mtree $f`
            sudo -E .github/append_manifests.py build/$BASE_NAME.metadata.yaml $f mtree
          done
      
  
  
      - name: Run make create-repo
        run: |
          sudo -E make create-repo

      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-opensuse
          path: build
          if-no-files-found: error

    
  
  
  
  
  iso-squashfs-opensuse:
    
  
    runs-on: ubuntu-latest
  

    needs: build-opensuse
    env:
      FINAL_REPO: quay.io/costoolkit/releases-opensuse
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-opensuse
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV

      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-opensuse-${{ env.COS_VERSION }}" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-opensuse-${{ env.COS_VERSION }}" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-opensuse.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error

  
  
  
  
  qemu-squashfs-opensuse:
    runs-on: macos-10.15
    needs: iso-squashfs-opensuse
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-opensuse.iso.zip
      - name: Install deps
        run: |
          brew install qemu
          brew install yq@3
      - name: Build QEMU Image ðŸ”§
        run: |
          export YQ=/usr/local/opt/yq@3/bin/yq
          source .github/helpers.sh
          COS_VERSION=$(cos_version)
          PACKER_ARGS="-var='accelerator=hvf' -var='build=$COS_VERSION' -var='arch=amd64' -var='flavor=opensuse' -var='feature=vagrant' -only qemu.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-opensuse.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-opensuse-QEMU.box
          path: |
            packer/*.box
          if-no-files-found: error

  
  
  
  
  vbox-squashfs-opensuse:
    runs-on: macos-10.15
    needs: iso-squashfs-opensuse
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-opensuse.iso.zip

      # - name: Install deps
      #   run: |
      #     brew tap hashicorp/tap
      #     brew install hashicorp/tap/packer
      - name: Install deps
        run: |
            brew install yq@3
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/opt/yq@3/bin/yq
          source .github/helpers.sh
          COS_VERSION=$(cos_version)
          PACKER_ARGS="-var='feature=vagrant' -var='build=$COS_VERSION' -var='arch=amd64' -var='flavor=opensuse' -only virtualbox-iso.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-opensuse.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-squashfs-opensuse-vbox.box
          path: |
            packer/*.box
          if-no-files-found: error

  
  
  
  
  tests-squashfs-opensuse:
    env:
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-squashfs-opensuse
    strategy:
      matrix:
        test: ["test-features", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-squashfs-opensuse-vbox.box
          path: packer

      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          make test-clean
          make vagrantfile
          make prepare-test
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure() && contains(matrix.test, 'upgrade')
        with:
          name: cOS-squashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-squashfs-${{ matrix.test }}.serial.zip
          path: tests/serial_port1
          if-no-files-found: warn

    
  
  
  
  
  iso-nonsquashfs-opensuse:
    
  
    runs-on: ubuntu-latest
  

    needs: build-opensuse
    env:
      FINAL_REPO: quay.io/costoolkit/releases-opensuse
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-opensuse
          path: build
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso squashfs-tools
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Tweak manifest and drop squashfs recovery
        run: |
          source .github/helpers.sh
          drop_recovery manifest.yaml
      
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV

      - name: Build ISO from local build ðŸ”§
        if: github.event_name != 'schedule' && !startsWith(github.ref, 'refs/tags/')
        run: |
          source .github/helpers.sh
          create_remote_manifest manifest.yaml
          sudo -E MAKEISO_ARGS="--output cOS-opensuse-${{ env.COS_VERSION }}" MANIFEST=manifest.yaml.remote make local-iso
      - name: Build ISO from remote repositories ðŸ”§
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          sudo -E YQ=/usr/bin/yq MAKEISO_ARGS="--output cOS-opensuse-${{ env.COS_VERSION }}" make iso
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error

  
  
  
  
  qemu-nonsquashfs-opensuse:
    runs-on: macos-10.15
    needs: iso-nonsquashfs-opensuse
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.iso.zip
      - name: Install deps
        run: |
          brew install qemu
          brew install yq@3
      - name: Build QEMU Image ðŸ”§
        run: |
          export YQ=/usr/local/opt/yq@3/bin/yq
          source .github/helpers.sh
          COS_VERSION=$(cos_version)
          PACKER_ARGS="-var='accelerator=hvf' -var='build=$COS_VERSION' -var='arch=amd64' -var='flavor=opensuse' -var='feature=vagrant' -only qemu.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.qcow
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse-QEMU.box
          path: |
            packer/*.box
          if-no-files-found: error

  
  
  
  
  vbox-nonsquashfs-opensuse:
    runs-on: macos-10.15
    needs: iso-nonsquashfs-opensuse
    steps:
      - uses: actions/checkout@v2
      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.iso.zip

      # - name: Install deps
      #   run: |
      #     brew tap hashicorp/tap
      #     brew install hashicorp/tap/packer
      - name: Install deps
        run: |
            brew install yq@3
      - name: Build VBox Image ðŸ”§
        run: |
          export YQ=/usr/local/opt/yq@3/bin/yq
          source .github/helpers.sh
          COS_VERSION=$(cos_version)
          PACKER_ARGS="-var='feature=vagrant' -var='build=$COS_VERSION' -var='arch=amd64' -var='flavor=opensuse' -only virtualbox-iso.cos" make packer
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.ova
          path: |
            packer/*.tar.gz
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse-vbox.box
          path: |
            packer/*.box
          if-no-files-found: error

  
  
  
  
  tests-nonsquashfs-opensuse:
    env:
      VAGRANT_CPU: 3
      VAGRANT_MEMORY: 10240
    runs-on: macos-10.15
    needs: vbox-nonsquashfs-opensuse
    strategy:
      matrix:
        test: ["test-features", "test-smoke", "test-fallback", "test-recovery", "test-upgrades-images-signed", "test-upgrades-images-unsigned", "test-upgrades-local", "test-deploys-images"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
      - uses: actions/checkout@v2
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse-vbox.box
          path: packer

      - name: Run tests ðŸ”§
        run: |
          export GOPATH="/Users/runner/go"
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          PATH=$PATH:$GOPATH/bin
          make test-clean
          make vagrantfile
          make prepare-test
          make ${{ matrix.test }}
      - uses: actions/upload-artifact@v2
        if: failure() && contains(matrix.test, 'upgrade')
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cOS-nonsquashfs-${{ matrix.test }}.serial.zip
          path: tests/serial_port1
          if-no-files-found: warn

  
  
  
  image-link-opensuse:
    runs-on: ubuntu-latest
    needs: publish-opensuse
    steps:
      - uses: actions/checkout@v2
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Generate link for opensuse
        run: |
            source .github/helpers.sh
            PACKAGE_VERSION=$(cos_package_version)
            export COS_VERSION="${PACKAGE_VERSION/+/-}"
            echo "quay.io/costoolkit/releases-opensuse:cos-system-${COS_VERSION}" > images-opensuse.txt
      - uses: actions/upload-artifact@v2
        with:
          name: images-opensuse.txt
          path: |
            images-opensuse.txt

  
  
  
  publish-opensuse:
    runs-on: ubuntu-latest
    needs: tests-squashfs-opensuse
    env:
      FLAVOR: opensuse
      FINAL_REPO: quay.io/costoolkit/releases-opensuse
      DOWNLOAD_METADATA: true
      DOWNLOAD_ONLY: true
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-opensuse
          path: build
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Install Go
        uses: actions/setup-go@v2
      - name: Grab metadata from remotes
        run: |
          export PATH=$PATH:/usr/local/go/bin
          pushd ./.github
          go build -o build
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
      - name: Publish to DockerHub ðŸš€
        run: |
          sudo -E make publish-repo

  
  
  

  github-release-opensuse:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
    - build-opensuse
    - raw-images-opensuse
    - vbox-nonsquashfs-opensuse
    - qemu-nonsquashfs-opensuse
    - iso-nonsquashfs-opensuse
    - image-link-opensuse
    - tests-nonsquashfs-opensuse
    - tests-squashfs-opensuse
    steps:
      - uses: actions/checkout@v2
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV

      - name: Download ISO
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.iso.zip
          path: release
      - name: Download vagrant box
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse-vbox.box
          path: release
      - name: Download OVA image
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.ova
          path: release
      - name: Download QCOW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-nonsquashfs-opensuse.qcow
          path: release
      - name: Download GCE RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-GCE-opensuse-${{ env.COS_VERSION }}
          path: release
      - name: Download AZURE RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-opensuse-${{ env.COS_VERSION }}
          path: release
      - name: Download RAW image
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-opensuse-${{ env.COS_VERSION }}
          path: release
      - name: Download Image links
        uses: actions/download-artifact@v2
        with:
          name: images-opensuse.txt
          path: release
      - name: Release
        uses: fnkr/github-action-ghr@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GHR_COMPRESS: xz
          GHR_PATH: release/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
  
  
  raw-images-opensuse:
    runs-on: ubuntu-latest
    container: opensuse/leap:15.3
    needs:
    - build-opensuse

    steps:
      - name: Install OS deps
        run: |
          zypper in -y bc qemu-tools sudo curl e2fsprogs dosfstools mtools squashfs gptfdisk make tar gzip xz which
      - uses: actions/checkout@v2
      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-opensuse
          path: build
      - name: Install toolchain
        run: |
          # Since some time /var/lock is a symlink to /run/lock, which doesn't exit in the continer
          rm -rf /var/lock
          mkdir -p /var/lock
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV

      
  
  
      - name: Run make raw_disk
        run: |
          sudo -E make raw_disk

      
  
  
      - name: Run make azure_disk
        run: |
          sudo -E make azure_disk

      
  
  
      - name: Run make gce_disk
        run: |
          sudo -E make gce_disk

      - name: Rename images
        run: |
          mv disk.raw cOS-Vanilla-RAW-opensuse-${{ env.COS_VERSION }}.raw
          mv disk.vhd cOS-Vanilla-AZURE-opensuse-${{ env.COS_VERSION }}.vhd
          mv disk.raw.tar.gz cOS-Vanilla-AZURE-opensuse-${{ env.COS_VERSION }}.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-RAW-opensuse-${{ env.COS_VERSION }}
          path: |
            cOS-Vanilla-RAW-opensuse-${{ env.COS_VERSION }}.raw
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-AZURE-opensuse-${{ env.COS_VERSION }}
          path: |
            cOS-Vanilla-AZURE-opensuse-${{ env.COS_VERSION }}.vhd
          if-no-files-found: error
      - uses: actions/upload-artifact@v2
        with:
          name: cOS-Vanilla-GCE-opensuse-${{ env.COS_VERSION }}
          path: |
            cOS-Vanilla-AZURE-opensuse-${{ env.COS_VERSION }}.tar.gz
          if-no-files-found: error

  
  
  
  ami-publish-opensuse:
    runs-on: ubuntu-latest
    needs: publish-vanilla-ami
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
      - uses: actions/checkout@v2
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Build AMI for opensuse
        run: |
            source .github/helpers.sh
            PACKAGE_VERSION=$(cos_package_version)
            export COS_VERSION="${PACKAGE_VERSION/+/-}"
            export PKR_VAR_cos_version="${COS_VERSION}"
            export PKR_VAR_cos_deploy_args="cos-deploy --docker-image quay.io/costoolkit/releases-opensuse:cos-system-${COS_VERSION}"
            export PKR_VAR_flavor=opensuse
            export PKR_VAR_git_sha="${GITHUB_SHA}"
            make packer-aws

  
  
  
  
  docker-build-fedora:
    
  
    runs-on: ubuntu-latest
  

    env:
      FLAVOR: fedora
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Build  ðŸ”§
        shell: 'script -q -e -c "bash {0}"'
        run: |
          source .envrc
          cos-build $FLAVOR

  
  
  
  build-fedora:
    
  
    runs-on: ubuntu-latest
  

    env:
      FLAVOR: fedora
      FINAL_REPO: quay.io/costoolkit/releases-fedora
      DOWNLOAD_METADATA: false
      PUSH_CACHE: true
      REPO_CACHE: quay.io/costoolkit/build-fedora-cache
    steps:
      
  
      - name: Install Go
        uses: actions/setup-go@v2

      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      
  
  
      - name: Run make validate
        run: |
          sudo -E make validate

      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build
          popd
          ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Generate manifests
        run: |
          for f in build/*tar*; do
            [ -e "$f" ] || continue
            sudo -E luet mtree -- generate $f -o "$f.mtree"
          done
      - name: Append manifests to metadata
        run: |
          for f in build/*mtree; do
            [ -e "$f" ] || continue
            BASE_NAME=`basename -s .package.tar.zst.mtree $f`
            sudo -E .github/append_manifests.py build/$BASE_NAME.metadata.yaml $f mtree
          done
      
  
  
      - name: Run make create-repo
        run: |
          sudo -E make create-repo

      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-fedora
          path: build
          if-no-files-found: error

    
    
  
  
  
  image-link-fedora:
    runs-on: ubuntu-latest
    needs: publish-fedora
    steps:
      - uses: actions/checkout@v2
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Generate link for fedora
        run: |
            source .github/helpers.sh
            PACKAGE_VERSION=$(cos_package_version)
            export COS_VERSION="${PACKAGE_VERSION/+/-}"
            echo "quay.io/costoolkit/releases-fedora:cos-system-${COS_VERSION}" > images-fedora.txt
      - uses: actions/upload-artifact@v2
        with:
          name: images-fedora.txt
          path: |
            images-fedora.txt

  
  
  
  publish-fedora:
    runs-on: ubuntu-latest
    needs:
    - build-fedora
    env:
      FLAVOR: fedora
      FINAL_REPO: quay.io/costoolkit/releases-fedora
      DOWNLOAD_METADATA: true
      DOWNLOAD_ONLY: true
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-fedora
          path: build
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Install Go
        uses: actions/setup-go@v2
      - name: Grab metadata from remotes
        run: |
          export PATH=$PATH:/usr/local/go/bin
          pushd ./.github
          go build -o build
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
      - name: Publish to DockerHub ðŸš€
        run: |
          sudo -E make publish-repo

  
  
  
  
  docker-build-ubuntu:
    
  
    runs-on: ubuntu-latest
  

    env:
      FLAVOR: ubuntu
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Build  ðŸ”§
        shell: 'script -q -e -c "bash {0}"'
        run: |
          source .envrc
          cos-build $FLAVOR

  
  
  
  build-ubuntu:
    
  
    runs-on: ubuntu-latest
  

    env:
      FLAVOR: ubuntu
      FINAL_REPO: quay.io/costoolkit/releases-ubuntu
      DOWNLOAD_METADATA: false
      PUSH_CACHE: true
      REPO_CACHE: quay.io/costoolkit/build-ubuntu-cache
    steps:
      
  
      - name: Install Go
        uses: actions/setup-go@v2

      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      
  
  
      - name: Run make validate
        run: |
          sudo -E make validate

      - name: Build packages ðŸ”§
        run: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir build || true
          pushd ./.github
          go build -o build
          popd
          ./.github/build
          ls -liah $PWD/build
          sudo chmod -R 777 $PWD/build
      - name: Generate manifests
        run: |
          for f in build/*tar*; do
            [ -e "$f" ] || continue
            sudo -E luet mtree -- generate $f -o "$f.mtree"
          done
      - name: Append manifests to metadata
        run: |
          for f in build/*mtree; do
            [ -e "$f" ] || continue
            BASE_NAME=`basename -s .package.tar.zst.mtree $f`
            sudo -E .github/append_manifests.py build/$BASE_NAME.metadata.yaml $f mtree
          done
      
  
  
      - name: Run make create-repo
        run: |
          sudo -E make create-repo

      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: build-ubuntu
          path: build
          if-no-files-found: error

    
    
  
  
  
  image-link-ubuntu:
    runs-on: ubuntu-latest
    needs: publish-ubuntu
    steps:
      - uses: actions/checkout@v2
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Generate link for ubuntu
        run: |
            source .github/helpers.sh
            PACKAGE_VERSION=$(cos_package_version)
            export COS_VERSION="${PACKAGE_VERSION/+/-}"
            echo "quay.io/costoolkit/releases-ubuntu:cos-system-${COS_VERSION}" > images-ubuntu.txt
      - uses: actions/upload-artifact@v2
        with:
          name: images-ubuntu.txt
          path: |
            images-ubuntu.txt

  
  
  
  publish-ubuntu:
    runs-on: ubuntu-latest
    needs:
    - build-ubuntu
    env:
      FLAVOR: ubuntu
      FINAL_REPO: quay.io/costoolkit/releases-ubuntu
      DOWNLOAD_METADATA: true
      DOWNLOAD_ONLY: true
    steps:
      
  
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: build-ubuntu
          path: build
      - name: Login to Quay Registry
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      - name: Install Go
        uses: actions/setup-go@v2
      - name: Grab metadata from remotes
        run: |
          export PATH=$PATH:/usr/local/go/bin
          pushd ./.github
          go build -o build
          popd
          sudo -E ./.github/build
          ls -liah $PWD/build
      - name: Publish to DockerHub ðŸš€
        run: |
          sudo -E make publish-repo


  
  
  # We need only a single vanilla image for any OS
  # Vanilla image is always based on openSUSE
  publish-vanilla-ami:
    runs-on: ubuntu-latest
    needs: [raw-images-opensuse, tests-squashfs-opensuse]

    steps:
      - uses: actions/checkout@v2
      
  
  
      - name: Run make deps
        run: |
          sudo -E make deps
          sudo luet install -y toolchain/yq

      
      - name: Export cos version
        run: |
             source .github/helpers.sh
             echo "COS_VERSION=$(cos_version)" >> $GITHUB_ENV

      - name: Download result for build
        uses: actions/download-artifact@v2
        with:
          name: cOS-Vanilla-RAW-${{ env.COS_VERSION }}-opensuse-${{ github.sha }}
          path: .
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Upload and publish vanilla image
        run: |
          export github_sha="${GITHUB_SHA}"
          export COPY_AMI_ALL_REGIONS="true"
          make aws_vanilla_ami

